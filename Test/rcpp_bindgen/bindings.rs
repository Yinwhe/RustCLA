/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Debug)]
pub struct A {
    pub data: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_A() {
    assert_eq!(
        ::std::mem::size_of::<A>(),
        8usize,
        concat!("Size of: ", stringify!(A))
    );
    assert_eq!(
        ::std::mem::align_of::<A>(),
        8usize,
        concat!("Alignment of ", stringify!(A))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<A>())).data as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(A), "::", stringify!(data))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN1A4funcEv"]
    pub fn A_func(this: *mut A);
}
extern "C" {
    #[link_name = "\u{1}_ZN1AC1Ei"]
    pub fn A_A(this: *mut A, size: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN1AD1Ev"]
    pub fn A_A_destructor(this: *mut A);
}
impl A {
    #[inline]
    pub unsafe fn func(&mut self) {
        A_func(self)
    }
    #[inline]
    pub unsafe fn new(size: ::std::os::raw::c_int) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        A_A(__bindgen_tmp.as_mut_ptr(), size);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        A_A_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct B {
    pub _base: A,
}
#[test]
fn bindgen_test_layout_B() {
    assert_eq!(
        ::std::mem::size_of::<B>(),
        8usize,
        concat!("Size of: ", stringify!(B))
    );
    assert_eq!(
        ::std::mem::align_of::<B>(),
        8usize,
        concat!("Alignment of ", stringify!(B))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN1B4funcEv"]
    pub fn B_func(this: *mut B);
}
extern "C" {
    #[link_name = "\u{1}_ZN1BC1Ei"]
    pub fn B_B(this: *mut B, size: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN1BD1Ev"]
    pub fn B_B_destructor(this: *mut B);
}
impl B {
    #[inline]
    pub unsafe fn func(&mut self) {
        B_func(self)
    }
    #[inline]
    pub unsafe fn new(size: ::std::os::raw::c_int) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        B_B(__bindgen_tmp.as_mut_ptr(), size);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        B_B_destructor(self)
    }
}
