/* automatically generated by rust-bindgen 0.65.1 */

#[repr(C)]
#[derive(Debug)]
pub struct A {
    pub data: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_A() {
    const UNINIT: ::std::mem::MaybeUninit<A> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<A>(),
        8usize,
        concat!("Size of: ", stringify!(A))
    );
    assert_eq!(
        ::std::mem::align_of::<A>(),
        8usize,
        concat!("Alignment of ", stringify!(A))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).data) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(A), "::", stringify!(data))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN1A4funcEv"]
    pub fn A_func(this: *mut A);
}
extern "C" {
    #[link_name = "\u{1}_ZN1AC1Ei"]
    pub fn A_A(this: *mut A, size: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN1AD1Ev"]
    pub fn A_A_destructor(this: *mut A);
}
impl A {
    #[inline]
    pub unsafe fn func(&mut self) {
        A_func(self)
    }
    #[inline]
    pub unsafe fn new(size: ::std::os::raw::c_int) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        A_A(__bindgen_tmp.as_mut_ptr(), size);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        A_A_destructor(self)
    }
}
#[repr(C)]
pub struct B__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct B {
    pub vtable_: *const B__bindgen_vtable,
    pub __bindgen_padding_0: u64,
}
#[test]
fn bindgen_test_layout_B() {
    assert_eq!(
        ::std::mem::size_of::<B>(),
        16usize,
        concat!("Size of: ", stringify!(B))
    );
    assert_eq!(
        ::std::mem::align_of::<B>(),
        8usize,
        concat!("Alignment of ", stringify!(B))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN1B4funcEv"]
    pub fn B_func(this: *mut B);
}
extern "C" {
    #[link_name = "\u{1}_ZN1BC1Ei"]
    pub fn B_B(this: *mut B, size: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN1BD1Ev"]
    pub fn B_B_destructor(this: *mut B);
}
impl B {
    #[inline]
    pub unsafe fn func(&mut self) {
        B_func(self)
    }
    #[inline]
    pub unsafe fn new(size: ::std::os::raw::c_int) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        B_B(__bindgen_tmp.as_mut_ptr(), size);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        B_B_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct C {
    pub _base_1: B,
}
#[test]
fn bindgen_test_layout_C() {
    assert_eq!(
        ::std::mem::size_of::<C>(),
        16usize,
        concat!("Size of: ", stringify!(C))
    );
    assert_eq!(
        ::std::mem::align_of::<C>(),
        8usize,
        concat!("Alignment of ", stringify!(C))
    );
}
extern "C" {
    #[link_name = "\u{1}_ZN1C4funcEv"]
    pub fn C_func(this: *mut C);
}
extern "C" {
    #[link_name = "\u{1}_ZN1CC1Ei"]
    pub fn C_C(this: *mut C, size: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_ZN1CD1Ev"]
    pub fn C_C_destructor(this: *mut C);
}
impl C {
    #[inline]
    pub unsafe fn func(&mut self) {
        C_func(self)
    }
    #[inline]
    pub unsafe fn new(size: ::std::os::raw::c_int) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        C_C(__bindgen_tmp.as_mut_ptr(), size);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        C_C_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct S {
    pub a: ::std::os::raw::c_char,
    pub b: ::std::os::raw::c_int,
    pub c: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_S() {
    const UNINIT: ::std::mem::MaybeUninit<S> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<S>(),
        12usize,
        concat!("Size of: ", stringify!(S))
    );
    assert_eq!(
        ::std::mem::align_of::<S>(),
        4usize,
        concat!("Alignment of ", stringify!(S))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        0usize,
        concat!("Offset of field: ", stringify!(S), "::", stringify!(a))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        4usize,
        concat!("Offset of field: ", stringify!(S), "::", stringify!(b))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).c) as usize - ptr as usize },
        8usize,
        concat!("Offset of field: ", stringify!(S), "::", stringify!(c))
    );
}
extern "C" {
    #[link_name = "\u{1}_Z4getSv"]
    pub fn getS() -> S;
}
extern "C" {
    #[link_name = "\u{1}_Z8overloadi"]
    pub fn overload(a: ::std::os::raw::c_int);
}
extern "C" {
    #[link_name = "\u{1}_Z8overloadii"]
    pub fn overload1(a: ::std::os::raw::c_int, b: ::std::os::raw::c_int);
}
